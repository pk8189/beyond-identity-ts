/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "@public/beyond_identity_api/core";
import * as requests from "@public/beyond_identity_api/resources/v1/tenants/realms/resource-servers/roles/list-members/request-types";
import * as types from "@public/beyond_identity_api/types";
import qs from "qs";

export class ListMembersClient extends CoreResourceClient {
  // register resources (keep comment for code generation)

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
  }

  // register api methods (keep comment for code generation)

  /**
   * To list members assigned to a role, send a GET request to
   * `/v1/tenants/$TENANT_ID/realms/$REALM_ID/resource-servers/$RESOURCE_SERVER_ID/roles/$ROLE_ID:listMembers`.
   *
   * The response will contain at most 200 items and may contain a page token to
   * query the remaining items. If page size is not specified, the response will
   * contain 20 items. There is no defined ordering of the list of members in the
   * response. Note that the maximum and default page sizes are subject to
   * change.
   *
   * When paginating, the page size is maintained by the page token but may be
   * overridden on subsequent requests. The skip is not maintained by the page
   * token and must be specified on each subsequent request.
   *
   * Page tokens expire after one week. Requests which specify an expired page
   * token will result in undefined behavior.
   *
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.ListRoleMembersResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/resource-servers/${request.resourceServerId}/roles/${request.roleId}:listMembers`,
      auth: ["BearerAuth"],
      query: [
        qs.stringify({ groups_page_size: request.groupsPageSize }),
        qs.stringify({ groups_skip: request.groupsSkip }),
        qs.stringify({ identities_page_size: request.identitiesPageSize }),
        qs.stringify({ identities_skip: request.identitiesSkip }),
        qs.stringify({ page_token: request.pageToken }),
      ],
      responseType: "json",
      opts,
    });
  }
}
