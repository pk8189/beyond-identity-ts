/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "@public/beyond_identity_api/core";
import * as requests from "@public/beyond_identity_api/resources/v1/tenants/realms/applications/tokens/request-types";
import * as types from "@public/beyond_identity_api/types";
import qs from "qs";

export class TokensClient extends CoreResourceClient {
  // register resources (keep comment for code generation)

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
  }

  // register api methods (keep comment for code generation)

  /**
   * To list all tokens issued by an application, send a GET request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/applications/$APPLICATION_ID/tokens`.
   * The `$APPLICATION_ID` in path corresponds to the application that is the issuer of the token.
   * To filter the list of tokens by a principal, set `principal_type` and `principal_id`. These parameters are optional.
   * The response will contain at most 100 items and may contain a page token to query the remaining items. If page size is not specified, the response will contain 100 items. There is no defined ordering of the list of tokens in the response.  Note that the maximum and default page sizes are subject to change.
   * When paginating, the page size is maintained by the page token but may be overridden on subsequent requests. The skip is not maintained by the page token and must be specified on each subsequent request.
   * Page tokens expire after one week. Requests which specify an expired page token will result in undefined behavior.
   *
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetV1TenantsTenantIdRealmsRealmIdApplicationsApplicationIdTokensResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/applications/${request.applicationId}/tokens`,
      auth: ["BearerAuth"],
      query: [
        qs.stringify({ principal_id: request.principalId }),
        qs.stringify({ principal_type: request.principalType }),
      ],
      responseType: "json",
      opts,
    });
  }

  /**
   * To revoke a token, send a DELETE request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/applications/$APPLICATION_ID/tokens/$TOKEN_ID`.
   * The `$APPLICATION_ID` in path corresponds to the application that is the issuer of the token.
   * A successful request will receive a 200 status code with no body in the response. This indicates that the request was processed successfully.
   * If the token ID is not available, the access token must be revoked via the [RFC-7009 revoke endpoint](https://developer.beyondidentity.com/docs/revoke-access-tokens).
   *
   */
  delete(
    request: requests.DeleteRequest,
    opts?: RequestOptions,
  ): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "delete",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/applications/${request.applicationId}/tokens/${request.tokenId}`,
      auth: ["BearerAuth"],
      responseType: "json",
      opts,
    });
  }
}
