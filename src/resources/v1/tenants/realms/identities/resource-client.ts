/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "@public/beyond_identity_api/core";
import { CredentialBindingJobsClient } from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/credential-binding-jobs";
import { CredentialsClient } from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/credentials";
import { ListGroupsClient } from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/list-groups";
import { ListRolesClient } from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/list-roles";
import * as requests from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/request-types";
import * as types from "@public/beyond_identity_api/types";
import qs from "qs";

export class IdentitiesClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  credentialBindingJobs: CredentialBindingJobsClient;
  credentials: CredentialsClient;
  listGroups: ListGroupsClient;
  listRoles: ListRolesClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.credentialBindingJobs = new CredentialBindingJobsClient(this._client);
    this.credentials = new CredentialsClient(this._client);
    this.listGroups = new ListGroupsClient(this._client);
    this.listRoles = new ListRolesClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * To create an identity, send a POST request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities`. Values in the request body for read-only fields will be ignored.
   * If the request conflicts with an existing resource, you will receive a 409 error.
   *
   */
  create(
    request: requests.CreateRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.Identity> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "post",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities`,
      auth: ["BearerAuth"],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * To update only specific attributes of an existing identity, send a PATCH request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities/$IDENTITY_ID`. Values in the request body for immutable or read-only fields will be ignored. Fields that are omitted from the request body will be left unchanged.
   * If the request conflicts with an existing resource, you will receive a 409 error.
   *
   */
  patch(
    request: requests.PatchRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.Identity> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "patch",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities/${request.identityId}`,
      auth: ["BearerAuth"],
      contentType: "application/json",
      body: request.data,
      responseType: "json",
      opts,
    });
  }

  /**
   * To retrieve an existing identity, send a GET request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities/$IDENTITY_ID`.
   *
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.Identity> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities/${request.identityId}`,
      auth: ["BearerAuth"],
      responseType: "json",
      opts,
    });
  }

  /**
   * To list identities for a realm, send a GET request to
   * `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities`.
   *
   * The response will only contain identities matching the filter in the
   * request. If no filter is provided, the request will match all identities in
   * the realm. Currently, the only supported filter is
   * `traits.username eq "$USERNAME"`.
   *
   * The response will contain at most 200 items and may contain a page token to
   * query the remaining items. If page size is not specified, the response will
   * contain 20 items. There is no defined ordering of the list of identities in
   * the response. Note that the maximum and default page sizes are subject to
   * change.
   *
   * When paginating, the page size is maintained by the page token but may be
   * overridden on subsequent requests. The filter is also maintained by the page
   * token but it may not be overridden. If specified, the request filter must
   * match the filter maintained by the page token, otherwise you will receive a
   * 400 error. The skip is not maintained by the page token and must be
   * specified on each subsequent request.
   *
   * Page tokens expire after one week. Requests which specify an expired page
   * token will result in undefined behavior.
   *
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.ListIdentitiesResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities`,
      auth: ["BearerAuth"],
      query: [
        qs.stringify({ filter: request.filter }),
        qs.stringify({ page_size: request.pageSize }),
        qs.stringify({ page_token: request.pageToken }),
        qs.stringify({ skip: request.skip }),
      ],
      responseType: "json",
      opts,
    });
  }

  /**
   * To delete an identity, send a DELETE request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities/$IDENTITY_ID`. To be deleted, an identity must not be a member of any groups or roles. The identity must must first be removed from all groups and roles or you will receive a 409 error.
   * A successful request will receive a 200 status code with no body in the response. This indicates that the request was processed successfully.
   *
   */
  delete(
    request: requests.DeleteRequest,
    opts?: RequestOptions,
  ): ApiPromise<null> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "delete",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities/${request.identityId}`,
      auth: ["BearerAuth"],
      responseType: "json",
      opts,
    });
  }
}
