/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "@public/beyond_identity_api/core";
import { RevokeClient } from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/credentials/revoke";
import * as requests from "@public/beyond_identity_api/resources/v1/tenants/realms/identities/credentials/request-types";
import * as types from "@public/beyond_identity_api/types";
import qs from "qs";

export class CredentialsClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  revoke: RevokeClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.revoke = new RevokeClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * To retrieve an existing credential, send a GET request to `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities/$IDENTITY_ID/credentials/$CREDENTIAL_ID`.
   *
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.Credential> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities/${request.identityId}/credentials/${request.credentialId}`,
      auth: ["BearerAuth"],
      responseType: "json",
      opts,
    });
  }

  /**
   * To list all credentials for an identity, send a GET request to
   * `/v1/tenants/$TENANT_ID/realms/$REALM_ID/identities/$IDENTITY_ID/credentials`.
   * `$IDENTITY_ID` may be a wildcard (`-`) to request all credentials across all
   * identities within the realm.
   *
   * The response will contain at most 200 items and may contain a page token to
   * query the remaining items. If page size is not specified, the response will
   * contain 20 items. There is no defined ordering of the list of credentials in
   * the response. Note that the maximum and default page sizes are subject to
   * change.
   *
   * When paginating, the page size is maintained by the page token but may be
   * overridden on subsequent requests. The skip is not maintained by the page
   * token and must be specified on each subsequent request.
   *
   * Page tokens expire after one week. Requests which specify an expired page
   * token will result in undefined behavior.
   *
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.ListCredentialsResponse> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/v1/tenants/${request.tenantId}/realms/${request.realmId}/identities/${request.identityId}/credentials`,
      auth: ["BearerAuth"],
      query: [
        qs.stringify({ page_size: request.pageSize }),
        qs.stringify({ page_token: request.pageToken }),
        qs.stringify({ skip: request.skip }),
      ],
      responseType: "json",
      opts,
    });
  }
}
